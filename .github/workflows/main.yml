name: CI/CD Pipeline

on: 
  push: 
    branches: 
      - main
  pull_request: 
    branches:
      - main

jobs: 
  build-and-deploy: 
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mlflow gdown scikit-learn

      - name: Download dataset from Google Drive
        run: |
          gdown --id 1T4mPMz50dZyQWV6SCZDvEXsKP28IGdEA -O MLproject/X_train.csv
          gdown --id 1nOJUUHU1dZDLHvjlZuIxsdZy1lHikf8U -O MLproject/X_test.csv
          gdown --id 1VIHMJezIppd1ViyJc7pM4Dxn3ABICdzY -O MLproject/y_train.csv
          gdown --id 1syGpIdgrPM3yypO7GWpMUy_LJ9mBO78h -O MLproject/y_test.csv

      - name: Run MLflow Project and Build Docker Image
        env:
          # Beri tahu MLflow di mana folder mlruns berada
          MLFLOW_TRACKING_URI: file://${{ github.workspace }}/MLproject/mlruns
        run: |
          # Jalankan training dan tangkap RUN_ID ke dalam sebuah variabel shell
          # Catatan: Skrip Python Anda harus mencetak "MLFLOW_RUN_ID=..." ke output
          FULL_OUTPUT=$(mlflow run ./MLproject --env-manager=local \
            -P X_train=X_train.csv \
            -P X_test=X_test.csv \
            -P y_train=y_train.csv \
            -P y_test=y_test.csv)
          
          echo "$FULL_OUTPUT"
          
          RUN_ID=$(echo "$FULL_OUTPUT" | grep "MLFLOW_RUN_ID" | cut -d'=' -f2)
          echo "Training completed with RUN_ID: $RUN_ID"

          # Jika RUN_ID kosong, hentikan workflow agar tidak gagal
          if [ -z "$RUN_ID" ]; then
            echo "Error: Could not find RUN_ID."
            exit 1
          fi

          # Bangun image Docker menggunakan perintah bawaan MLflow
          mlflow models build-docker \
            --model-uri "runs:/$RUN_ID/model" \
            --name "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classifier"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Tag and Push Docker Image
        run: |
          docker tag diabetes-classifier ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classifier:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classifier:latest
